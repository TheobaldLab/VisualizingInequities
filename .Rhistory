Ps <- PhotoTest(RWC, Tp, I)
SumCarbonDry_outputs <- SumCarbonDry(Ps, tgrowth,growth,drygrowth, imass, dt)
tgrowth = SumCarbonDry_outputs[1]
growth = SumCarbonDry_outputs[2]
drygrowth = SumCarbonDry_outputs[3]
NEWRWC_outputs <- NEWRWC(RWC, hm, pp, pa,dt, mass, imass,drymass)
RWC = NEWRWC_outputs[1]
mass = NEWRWC_outputs[2]
previous = "DRY"
}
if (Monitering_Data[i, 9] == "WET") {
RWC = 100
mass = imass
Tp = seatemp
WetPhoto_outputs = WetPhoto(previous, recovery, imass, seatemp, I, wettime)
PI = WetPhoto_outputs[1]
RWC = WetPhoto_outputs[2]
SumCarbonWet_outputs = SumCarbonWet(PI, tgrowth, growth, wetgrowth, imass, dt)
tgrowth = SumCarbonWet_outputs[1]
growth = SumCarbonWet_outputs[2]
wetgrowth = SumCarbonWet_outputs[3]
wettime = wettime + dt
immersed = immersed + 1
previous = "WET"
#print("done with wet iteratation")
}
}
#every 30 minutes, save time, H, Tp-273.15, RWC, tgrowth, growth, drygrowth, wetgrowth, immersed, emersed
#output_df[i,9] <- c()
output_df$time[i] = time
output_df$H[i] = H
output_df$RWC[i] = RWC
output_df$Tp[i]  = Tp - 273.15
output_df$tgrowth[i] = tgrowth
output_df$growth[i] = growth
output_df$drygrowth[i] = drygrowth
output_df$wetgrowth[i] = wetgrowth
output_df$immersed[i] = immersed
output_df$emersed[i] = emersed
tgrowth <- 0 #set tgrowth back to zero at the start of every 30 minutes
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Desktop/seaweed_model")
library(readr)
#Outline of code:
#Read in .dat file as dataframe
#assign column names
#columns= c("N","Day","Time","Wind","Tair","Humidity","Solar Irrid","Tidal height")
#Set initial conditions for a time when plant is fully hydrated
#Data cleaning (what orig. code calls environment)
#Add a new column to assess if wet or dry
#Each timestep check if wet or dry
#if Dry
#check if previous timestep is wet, if so recovery fast.
#fancy transfering wind measurments. Calculating wind velocity 1 cm above plant
#calculate surface temp Tsur
#calculate IR
#check if the wind speed is less that 0.36 and depending on what we get we caluclate hm (based on relative watercontent) hydradtion of mesophyll and hc, hydration of stomata of C3 plants
#calculate pa function of air temperature, RH*f(TA)
#Runge kutta method- we are guessing what the plant temperature is starting with air temperature, and then delta gets smaller and smaller as we approach our solution and we'll settle for a solution within 0.01, and then stop. Then we escape the while loop
#if, else if, else if, else (three conditions) which will let you choose your own adventure.
#If greater than 308 then fry
#if between 303 and 308, set recovery to slow and go to phototest
#If between 273.15 and 303 then go to phototest
#If less than 273, then set temp 0C and then go to phototest
#phototest
#Phototest- first you check for low RWC if is go to NEWRWC, next ask if net photosynthesis is positive by comparing respiration. Then you got to airphoto if net photosynthesis is positive, otherwise got to airrespire
#AirPhoto- based on temperature (<288,288-293,293-298,298-303), different equations for x, P1 and P2, which ultimately gives you P. (Note: equation for P is the same in all 4 cases, so can calculate this at the end after if else statements unlike original code where it's copied and pasted 4 times)
#AirRespire- just like AirPhoto, based on temperatues, only this time calculating respiration rates (<288,288-293,293-298,298-303,303-308) then calcutate Ps (still trying to figure out what Ps is and where you get R from)
#SumCarbon- simple function that will spit out igrowth, tgrowth, growth, and drygrowth
#NewRWC- calculates new RWC based on dmass, mass, RWC
#Increment time- want to go by 1 minute intervals and then sum up after 30 minutes recording time, H, RWC, Tp-273.15, tgrowth, growth, drygrowth, wetgrowth, immersed, emersed
#if Wet
#if previously dry then wettime = 0
#RWC automatically 100
#Tp is just seatemp
#figure out recovery
#set some parameters (why is Ipar 2*I?)
#if y > 30 then one equation for PI, othe rif not (what is the significance of y >30?)
#SumCarbon happening again
#Increment time- want to go by 1 minute intervals and then sum up after 30 minutes recording time, H, RWC, Tp-273.15, tgrowth, growth, drygrowth, wetgrowth, immersed, emersed
###Constants and parameters###
#Constants
a <- 0.5 #(Gates) abosorptivity spectrum
Ep <- 0.97 #(Pearcy et al)
Es <- 1.0
Esur <- 0.94 #emissivity, local surroundings of granite and algae yeild a value of 0.94
Sigma <- 5.67e-8 #Wm^-2K^-4
L <- 2441 #Jg^-1 at 25 C
Area <- 1e-3
k <- 0.4 #von Karman's constant
s <- 1 #in cm
s0 <- 0.0112 #roughness parameter
#Parameters
date <- "04-05-1993"
Environmental_File = file.path('c:', 'pc208', 'newapr90.dat')
thickness <- .1400000005960464
height <- 1 #Height on the shore (m)
Ts <- 250 #Sky temperature (K)
seatemp <- 286.1499938964844 #Sea temperature (C)
agfac <- 1 #Aggregation parameter
disfac <- 1 #Dissection parameter
Start_Day <- .9980000257492065
Start_Time <- 23.95800018310547
###make metafile with parameters##
file_name <- paste0(date,"_","thickness_",thickness,"_height_",height,"_Ts_",Ts,"_seatemp_",seatemp,"_agfac_",agfac,"_disfac_",disfac,"_metadata",".txt")
sink(file_name)
cat(date)
cat(Environmental_File)
cat("Plant thickness",thickness, "grams per sq. cm")
cat("\n")
cat("Height on shore",height, "m")
cat("\n")
cat("Sky temperature (K)",Ts)
cat("\n")
cat("Sea temperature",seatemp)
cat("\n")
cat("Aggregation parameter",agfac)
cat("\n")
cat("Dissection parameter",disfac)
sink()
AFS10MM <- read_csv("AFS10MM.csv")
###read in monitoring data file###
#monitoring data was from Monterey Bay Aquarium averaged over 30 minute intervals
#for some reason the way its formatted there is an extra row of NAs with a warning, so I suppressed the error message and simple removed the NAs
suppressWarnings({Monitering_Data <- read_table("NEWAPR90.dat", col_names = FALSE)})
Monitering_Data <- na.omit(Monitering_Data)
#create column names
columns= c("N","day","hour","Umax","Ta","RH","I","H")
#columns= c("N","Day","Time","Wind","Tair","Humidity","Solar Irrid","Tidal height")
# assign column names
colnames(Monitering_Data) = columns
###Edit the data frame so the variables are in the correct format for the model###
Monitering_Data$Umax <- Monitering_Data$Umax *0.45 #convert wind velocity to m/s
Monitering_Data[Monitering_Data$I < 0, "I"] <- 0 #set irrid values below 0 to 0 (no negative values)
Monitering_Data$Ta <- Monitering_Data$Ta  + 273.15 #convert to K
Monitering_Data$RH <- Monitering_Data$RH / 100 #scale
#Start at a time when plant is fully hydrated
#Set initial conditions
imass <- thickness*Area*1e4 #immersed mass
mass <- imass #set initial mass to immersed mass
drymass <-0.31*imass #dry mass is 0.31*immersed mass, conversion factor
RWC <- 100 #start with relative water content of 100
growth <- 0 #cumulative/net growth
tgrowth <- 0 #total growth over 30 minutes (gets set to zero after 30 minutes)
drygrowth <- 0 #dry growth (starts at 0)
wetgrowth <- 0 #wet growth (starts at 0)
time <- 0 #time variable to iterate
immersed <- 0 #time immersed
emersed <- 0 #time emersed
wettime <-0
dt <- 1 #time step of 1
recovery <- "fast"
previous <- "dry"
#initialize vectors to store outputs of alga model, which we will later put into a single data frame and export at an output file
time_vec <- vector("double", nrow(Monitering_Data))
H_vec <- Monitering_Data[,8] #since this won't update, just use weather station data (don't need to fill each time step)
RWC_vec <- vector("double", nrow(Monitering_Data))
Tp_vec <- vector("double", nrow(Monitering_Data))
tgrowth_vec <- vector("double", nrow(Monitering_Data))
growth_vec <- vector("double", nrow(Monitering_Data))
drygrowth_vec <- vector("double", nrow(Monitering_Data))
wetgrowth_vec <- vector("double", nrow(Monitering_Data))
immersed_vec <- vector("double", nrow(Monitering_Data))
emmersed_vec <- vector("double", nrow(Monitering_Data))
#Create column for dry or wet
Monitering_Data <- within(Monitering_Data, {
Wet_or_Dry <- NA # need to initialize variable
Wet_or_Dry[Monitering_Data$H >= 1] <- "WET" #if height is >= 1 then wet
Wet_or_Dry[Monitering_Data$H < 1] <- "DRY" #if height is <1 then dry
})
#Dry function to return plant temp
#Works? I think...tentatively (put in inputs for row 12 except set RWC to 100 and got ~280.5 which seems plausible)
DryPlantSetup <- function(recovery,Umax,Ta,RH,I,RWC,disfac,agfac,Sigma=5.67e-8 ,Ep=0.97,Es=1,Esur=0.94,a=0.5,L=2441,k=0.4,s=1,s0=0.0112){
uAQ = Umax #Obtain Wind velocity (already converted to M/S) at that timepoint
u=0.624*uAQ #Wind velocity of aquarium converted to mainstream algal canopy
ustar=0.042*u #converts mainstream velocity to shear velocity
u1=(ustar/k)*log(s/s0) #wind parameter taking into account various constants like roughness
u1=u1*agfac #scale by aggregation factor
Tsur=Ta+((I/656)*(8.05-1.9*(u^0.5))) #surface temperature, based on air temp as well as irradiance and wind
IR=0.5*(Es*Sigma*(Ts^4)+Esur*Sigma*(Tsur^4)) #Infrared radiance reaching thallus surface in the field
if (u1>0.36) { #if wind speed parameter is above this threshold
hc= (2.815+165.56*u1^2)*2 #mass transfer coefficient
hm= ((0.00864+0.0406*u1) ^2 )*(RWC-10) #mass transfer coefficient
} else { #if wind speed parameter is below this threshold
hc= (39.509*((u1+0.001)^0.488))*2 #added the 0.01 because otherwise get very inflated temps, but not satisfying fix
hm= 8.43e-4*((u1+0.001)^0.43)*(RWC-10)
}
hc=hc*disfac #scale hc by dissection factor
hm=hm*disfac #scale hm by dissection factor
pa=RH*(1e4/(4.62*Ta))*exp(52.58-(6790.5/Ta)-5.028*log(Ta)) #vapor pressure
Tp=Ta #best initial guess for plant temperature is air temperature
delta=1
#Netwon's iterative method (a powerful technique to numerically solve nonlinear equations)
while (abs(delta)>0.01) { #iterate until approximated solution is within 0.01 of solution for equation
pp = (1e4/ (4.62*Tp) )*exp(52.58-(6790.5/Tp)-5.028*log(Tp))
f=-1*a*I- (Ep*IR) + (Ep*Sigma*Tp^4) + (hc*(Tp-Ta) )+(L*hm*(pp-pa)) #EQ 4.9
x=((1e4*L*hm)/(4.62*Tp^2))*exp(52.58-(6790.5/Tp)-5.028*log(Tp))*((6790.5/Tp)-6.028) #I think this should be -5.028 but in code it's -6.028
df= (4*Ep*Sigma*Tp^3)+hc+x #derivative of f
delta = f/df #delta is f divided by df
Tp = Tp - delta #the new plant temperature is the old one minus delta
}
return(c(Tp,hm,pp,pa)) #return plant temperature and other relevant coefficients
}
PhotoTest <- function(RWC, Tp, I) {
#test for low RWC
if (RWC < 20) {
Ps = 0 #unsure if this is the case, but seems like with low RWC you go straight to NEWRWC meaning you don't photosynthesize or respire at that time step...need to ask about this
} else {
Pmax = 0.6
alpha = 353
Ipar = I * 2
R = -0.07
y=alpha*Ipar/Pmax
if (y > 30) {
PI = Pmax + R
} else {
PI = Pmax * ((exp(y) - exp(-y)) / (exp(y) + exp(-y))) + R
}
if (PI >= 0) {
Ps = AirPhoto(RWC, Tp, PI)
} else {
Ps = AirRespire(RWC, Tp, PI)
}
}
return(Ps)
}
#AirPhoto is a temperature dependent function where. Based on the tempearute, there are 4th degree polynomials to fit photosynthesis, and the fit is determined by averaging the equations as the given temperatures, weighted by how close you are to the temperature (for example, if you are at 290.5 then you'll get an equation that's the average of P1 and P2, and if you are at exactly 288, then X=0 and you simply use the equation for P1. )
AirPhoto <- function(RWC, Tp, PI) {  #function for photosynthesis, temp dependent
if (Tp < 288) { #if temperature is less than 288 K
x =(Tp-273.15) /14.85
P2=-0.0179313-0.00625828*RWC+0.000315177*RWC^2-2.24393e-6*RWC^3
P=x*P2
} else if (Tp>=288 & Tp<293) { #temps between 288 and 293
x= (Tp-288) /5
P1=-0.0179313-0.00625828*RWC+0.000315177*RWC^2-2.24393e-6*RWC^3
P2=0.251493-0.0256139*RWC+0.000671881*RWC^2-3.83019e-6*RWC^3
P=P1+ (x*(P2-P1))
} else if (Tp>=293 & Tp<298) { #temps between 293 and 298
x= (Tp-293 ) /5
P1=0.251493-0.0256139*RWC+0.000671881*RWC^2-3.83019e-6*RWC^3
P2=-0.05165-0.00318856*RWC+0.000248987*RWC^2-1.5673e-6*RWC^3
P=P1+(x*(P2-P1))
} else if (Tp>=298 & Tp<303) {  #temps between 298 and 303
x= (Tp-298)/5
P1=-0.05165-0.00318856*RWC+0.000248987*RWC^2-1.5673e-6*RWC^3
P2=-0.208138+0.00815457*RWC-4.32337e-5*RWC^2+7.3741e-7*RWC^3
P=P1+(x*(P2-P1))
} else if (Tp>=303 & Tp<308) { #between 303 and 308
x= (Tp-303 ) /5
P1=-0.208138+0.00815457*RWC-4.32337e-5*RWC^2+7.3741e-7*RWC^3
P2=-0.299293+0.00847735*RWC+3.04292e-5*RWC^2-3.81039e-7*RWC^3
P=P1+ (x*(P2-P1))
} else { #any other temps
P = 0 #no photosynthesis
}
Pmax = 0.6
R = -0.07
Ps=P*(PI/(Pmax+R))
return(Ps)
}
#Same structure as the photosynthesis equations, just for respiration
AirRespire <- function(RWC, Tp, PI) {
if (Tp < 288) {
x=(Tp-273.15)/14.85
R2=0.186726-0.00976215*RWC+0.00012417*RWC^2-4.99036e-7*RWC^3
Rmax=x*R2
} else if (Tp>=288 & Tp<293) {
X= (Tp-288 ) /5
R1=0.186726-0.00976215*RWC+0.00012417*RWC^2-4.99036e-7*RWC^3
R2=-0.11948+0.00964703*RWC-0.000234512*RWC^2+1.34811e-6*RWC^3
Rmax=R1 + (x* (R2-R1 ) )
} else if (Tp>=293 & Tp<298) {
x= (Tp-293 ) /5
R1=-0.11948+0.00964703*RWC-0.000234512*RWC^2+1.34811e-6*RWC^3
R2=-0.132598+0.00764787*RWC-0.000234571*RWC^2+1.58972e-6*RWC^3
Rmax=R1+ (x* (R2-R1 ) )
} else if (Tp>=298 & Tp<303) {
x=(Tp-298)/5
Rl=-0.132598+0.00764787*RWC-0.000234571*RWC^2+1.58972e-6*RWC^3
R2=-0.0468971+0.00265333*RWC-0.000175821*RWC~2+1.1559e-6*RWC^3
Rmax=R1+(x* (R2-R1))
} else if (Tp>=303 & Tp<308) {
x= (Tp-303 ) /5
R1=-0.0468971+0.00265333*RWC-0.000175821*RWC^2+1.1559e-6*RWC^3
R2=-0.0139332-0.00597083*RWC+1.5146e-5*RWC^2+8.40025e-8*RWC^3
Rmax=R1+ (x* (R2-R1 ) )
} else {
Rmax=0
}
R = -0.07
Ps=Rmax*(PI/R)
return(Ps)
}
SumCarbonDry <- function(Ps, tgrowth,growth,drygrowth, imass, dt) {
igrowth <- Ps * imass * dt
tgrowth <- tgrowth + igrowth
growth <- growth + igrowth
drygrowth <- drygrowth + igrowth
return(c(tgrowth,growth,drygrowth))
}
#plant temps are slightly off from original code so then RWC is also slightly off
NEWRWC <- function(RWC, hm, pp, pa,dt, mass, imass,drymass) {
#pa=RH*(1e4/(4.62*Ta))*exp(52.58-(6790.5/Ta)-5.028*log(Ta))
#pp=(1e4/(4.62*Tp))*exp(52.58-(6790.5/Tp)-5.028*log(Tp))
dmass = hm * Area * (pp - pa) * dt * 60 #what is dmass?
mass = mass - dmass
RWC = (mass - drymass) * 100 / (0.69 * imass)
if (RWC > 100) {
RWC = 100
mass = imass
} else if (RWC < 10) {
RWC = 10
}
return(c(RWC,mass))
}
WetPhoto <- function(previous, recovery, imass, seatemp, I,wettime) {
if (previous == "dry") {
wettime = 0
}
if (recovery == "fast") {
if (wettime * 10.50 > 30) {
Pt = 1
} else {
Pt = (1 - exp(-10.50 * wettime))
}
}
if (recovery == "slow") {
if (wettime * 1.09 > 30) {
Pt = 1
} else {
Pt = (1 - exp(1.09 * wettime))
}
}
Pmax = 0.74
alpha = 5.89e-3
Ipar = 2 * I
R = -0.08
y=alpha*Ipar/Pmax
if (y > 30) {
PI = Pmax + R
} else {
PI = Pmax * ((exp(y) - exp(-y)) / (exp(y) + exp(-y))) + R
}
PI=PI*Pt #scale PI by Pt (accounts for recovery from being exposed to air)
return(c(PI,RWC))
}
SumCarbonWet <- function(PI, tgrowth, growth, wetgrowth, imass, dt) {
igrowth <- PI * imass * dt
tgrowth <- tgrowth + igrowth
growth <- growth + igrowth
wetgrowth <- wetgrowth + igrowth
return(c(tgrowth,growth,wetgrowth))
}
# Need to run the model every minute and creating output based on input every 30 minutes
time <- vector("double", nrow(Monitering_Data))
H_vec <- Monitering_Data[,8]
RWC_vec <- vector("double", nrow(Monitering_Data))
Tp_vec <- vector("double", nrow(Monitering_Data))
tgrowth_vec <- vector("double", nrow(Monitering_Data))
growth_vec <- vector("double", nrow(Monitering_Data))
drygrowth_vec <- vector("double", nrow(Monitering_Data))
wetgrowth_vec <- vector("double", nrow(Monitering_Data))
immersed_vec <- vector("double", nrow(Monitering_Data))
emersed_vec <- vector("double", nrow(Monitering_Data))
output_df <- data.frame(time = time_vec,
H = H_vec,
RWC = RWC_vec,
Tp = Tp_vec,
tgrowth = tgrowth_vec,
growth = growth_vec,
drygrowth = drygrowth_vec,
wetgrowth = wetgrowth_vec,
immersed = immersed_vec,
emersed = emersed_vec)
#Set initial conditions
imass <- thickness*Area*1e4 #immersed mass
mass <- imass #set initial mass to immersed mass
drymass <-0.31*imass #dry mass is 0.31*immersed mass, conversion factor
RWC <- 100 #start with relative water content of 100
growth <- 0 #cumulative/net growth
tgrowth <- 0 #total growth over 30 minutes (gets set to zero after 30 minutes)
drygrowth <- 0 #dry growth (starts at 0)
wetgrowth <- 0 #wet growth (starts at 0)
time <- 0 #time variable to iterate
immersed <- 0 #time immersed
emersed <- 0 #time emersed
wettime <-0
dt <- 1 #time step of 1
recovery <- "fast"
previous <- "dry"
for (i in 1:nrow(Monitering_Data)) {  #nrow(Monitering_Data)
#Weather parameters that were measured every 30 minutes
Umax <- as.numeric(Monitering_Data[i, 4]) #wind speed
Ta <- as.numeric(Monitering_Data[i, 5]) #air temperatue
RH <- as.numeric(Monitering_Data[i, 6]) #relative humidity
I <- as.numeric(Monitering_Data[i, 7]) #irradiance
H <- as.numeric(Monitering_Data[i, 8]) #tidal height
for (j in 1:30) { #every min, update mass, igrowth, tgrowth, growth, drygrowth, emersed, immersed, time, RWC, recovery, previous
time = time + dt
if (Monitering_Data[i, 9] == "DRY") {
emersed = emersed + 1
if (previous == "WET") { #(Monitering_Data[i-1, 9] == "WET")
recovery = "fast"
}
DryPlantSetup_Outputs = DryPlantSetup(recovery, Umax, Ta, RH, I, RWC, disfac, agfac)
Tp = DryPlantSetup_Outputs[1]
hm = DryPlantSetup_Outputs[2]
pp = DryPlantSetup_Outputs[3]
pa = DryPlantSetup_Outputs[4]
if (Tp > 308) {
print("The plant fried") #If greater than 308 (34.85 C) then fry
break #need to fix this
} else if (Tp > 303 & Tp <= 308) {
#if between 303 and 308, set recovery to slow and go to phototest
recovery = "slow"
} else if (Tp < 273.15) {
#If less than 273, then set temp 0C and then go to phototes
Tp = 273.15
}
Ps <- PhotoTest(RWC, Tp, I)
SumCarbonDry_outputs <- SumCarbonDry(Ps, tgrowth,growth,drygrowth, imass, dt)
tgrowth = SumCarbonDry_outputs[1]
growth = SumCarbonDry_outputs[2]
drygrowth = SumCarbonDry_outputs[3]
NEWRWC_outputs <- NEWRWC(RWC, hm, pp, pa,dt, mass, imass,drymass)
RWC = NEWRWC_outputs[1]
mass = NEWRWC_outputs[2]
previous = "DRY"
}
if (Monitering_Data[i, 9] == "WET") {
RWC = 100
mass = imass
Tp = seatemp
WetPhoto_outputs = WetPhoto(previous, recovery, imass, seatemp, I, wettime)
PI = WetPhoto_outputs[1]
RWC = WetPhoto_outputs[2]
SumCarbonWet_outputs = SumCarbonWet(PI, tgrowth, growth, wetgrowth, imass, dt)
tgrowth = SumCarbonWet_outputs[1]
growth = SumCarbonWet_outputs[2]
wetgrowth = SumCarbonWet_outputs[3]
wettime = wettime + dt
immersed = immersed + 1
previous = "WET"
#print("done with wet iteratation")
}
}
#every 30 minutes, save time, H, Tp-273.15, RWC, tgrowth, growth, drygrowth, wetgrowth, immersed, emersed
#output_df[i,9] <- c()
output_df$time[i] = time
output_df$H[i] = H
output_df$RWC[i] = RWC
output_df$Tp[i]  = Tp - 273.15
output_df$tgrowth[i] = tgrowth
output_df$growth[i] = growth
output_df$drygrowth[i] = drygrowth
output_df$wetgrowth[i] = wetgrowth
output_df$immersed[i] = immersed
output_df$emersed[i] = emersed
tgrowth <- 0 #set tgrowth back to zero at the start of every 30 minutes
}
time = 0
plot(output_df$growth,t="l",lwd=1, main="Total Growth, Wet Growth, and Dry Growth R Output",xlab="N",ylab="growth")
lines(output_df$drygrowth,t="l",col="red",lwd=1)
lines(output_df$wetgrowth,t="l",col="blue",lwd=1)
legend(1, 4000, legend=c("total growth","wet growth","dry growth"),
col=c("black", "blue","red"), lty=1, cex=0.8,
title="Line types", text.font=4, bg='lightblue')
plot(AFS10MM$growth,t="l",lwd=2, main="Total Growth, Wet Growth, and Dry Growth BASIC Output",xlab="N",ylab="growth")
lines(AFS10MM$drygrowth,t="l",col="red",lwd=2)
lines(AFS10MM$wetgrowth,t="l",col="blue",lwd=2)
legend(1, 4000, legend=c("total growth","wet growth","dry growth"),
col=c("black", "blue","red"), lty=1, cex=0.8,
title="Line types", text.font=4, bg='lightblue')
plot(output_df$growth,t="l",main="Comparing Models Growth",xlab="N" ,ylab="growth")
lines(AFS10MM$growth,t="l",lwd=2)
legend(1, 4000, legend=c("R","BASIC"),
col=c("black", "black"), lty=1, cex=0.8, lwd = 1:2,
title="Line types", text.font=4, bg='lightblue')
plot(AFS10MM$wetgrowth,t="l",col="blue",lwd=2,main="Comparing Models Wet Growth",xlab="N" ,ylab="wet growth")
lines(output_df$wetgrowth,t="l",col="blue")
legend(1, 3400, legend=c("R","BASIC"),
col=c("blue", "blue"), lty=1, cex=0.8, lwd = 1:2,
title="Line types", text.font=4, bg='lightblue')
plot(AFS10MM$drygrowth,t="l",col="red",lwd=2,main="Comparing Models Dry Growth",xlab="N" ,ylab="dry growth")
lines(output_df$drygrowth,t="l",col="red")
legend(1, 1400, legend=c("R","BASIC"),
col=c("red", "red"), lty=1, cex=0.8, lwd = 1:2,
title="Line types", text.font=4, bg='lightblue')
plot(AFS10MM$Tp,t="l",main="Comparing Models Tps",ylab="Tp (degrees C)",xlab="N",col="red")
lines(output_df$Tp,t="l")
legend(1, 34, legend=c("R","BASIC"),
col=c( "black","red"), lty=1, cex=0.8, lwd = 1,
title="Line types", text.font=4, bg='lightblue')
plot(output_df$RWC,t="l")
lines(AFS10MM$RWC,t="l",col="red")
legend(1, 50, legend=c("R","BASIC"),
col=c( "black","red"), lty=1, cex=0.8, lwd = 1,
title="Line types", text.font=4, bg='lightblue')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/seaweed_model")
library(readr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/seaweed_model")
library(readr)
setwd("~/")
library(shiny); runApp('Documents/GitHub/VisualizingInequities/Website.R')
rsconnect::setAccountInfo(name='theobaldlab', token='085E9553BF1CBFC7DEBB32EF06974E91', secret='R1pazPtJMnX7U2TD1LXgvNSK0skMxaNWX/mC4RYY')
library(rsconnect)
rsconnect::deployApp('/Users/rachelpotter/Documents/GitHub/VisualizingInequities')
runApp('Documents/GitHub/VisualizingInequities/Website.R')
runApp('Documents/GitHub/VisualizingInequities/Website.R')
